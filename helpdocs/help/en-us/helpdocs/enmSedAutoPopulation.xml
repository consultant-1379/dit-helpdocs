<?xml version="1.0" encoding="utf-8"?>
<concept id="enmSedAutoPopulation">
  <title>ENM SED Auto Population</title>
  <conbody>
    <ul>
      <li><xref type="concept" href="enmSedAutoPopulation.xml#overview">Overview</xref></li>
      <li><xref type="concept" href="enmSedAutoPopulation.xml#purpose">Purpose Of This Feature</xref></li>
      <li><xref type="concept" href="enmSedAutoPopulation.xml#autoPopulate">Single Auto Populated Fields</xref></li>
      <li><xref type="concept" href="enmSedAutoPopulation.xml#externalIP">External IP Population</xref></li>
      <li><xref type="concept" href="enmSedAutoPopulation.xml#internalIP">Internal IP Population</xref></li>
      <li><xref type="concept" href="enmSedAutoPopulation.xml#vrrpIDs">Virtual Router Identifier Population</xref></li>
      <li><xref type="concept" href="enmSedAutoPopulation.xml#running">When It Runs</xref></li>
    </ul>
    <section>
      <title id="overview">Overview</title>
      <lines>
        This page describes the ENM SED auto population feature in the Deployment Inventory Tool.
        It describes what the purpose of this feature is, how it works at a high level and also describes the fields that are currently supported.
      </lines>
    </section>

    <section>
      <title id="purpose">Purpose Of This Feature</title>
      <lines>
        The ENM SED is made up of hundreds of keys and values that are required as input to an ENM installation or upgrade.
        To make the population of those fields as easy as possible and to reduce possible human error, DIT provides the option to enable auto population to help fill in some of these fields based on other information found in DIT itself.
        This feature is currently available in DIT when you are working on a document that makes use of one of the 'enm_sed' schemas.
        When enabled, the DIT UI will no longer allow you to edit these fields on the edit page. Instead they will be auto populated and will be visible after the document is saved on the documents view page or by downloading the sed via REST.
        Please note that auto population relies on details about your Pod/Project/Deployment from DIT. This means that on initial creation of the SED, it wont be associated yet with a deployment.
        In this case, all auto populated fields will be given dummy values, eg '1.1.1.1' for IP addresses. As soon as that SED is associated with its deployment, it will then be auto populated with details found in that deployment.
      </lines>
    </section>

    <section>
      <title id="autoPopulate">Single Auto Populated Fields</title>
      <lines>
        The following table shows the single fields that are automatically populated and the way in which they are derived.
        You can see that some of the values rely on details from DIT itself, ie where we get details about the deployments project, or the pod related with that project. You will also notice that some of the values are made up from other sed keys.
        <b>Warning:</b> If any of these sed keys are renamed or removed (ie those that are used to help generate other keys), DIT auto population may break down and may need to be updated.
      </lines>
      <simpletable>
        <sthead>
          <stentry>
            SED Key
          </stentry>
          <stentry>
            Value
          </stentry>
        </sthead>
        <strow>
          <stentry>
            parameters.cloudManagerRestInterfaceBaseURL
          </stentry>
          <stentry>
            deployment.project.pod.authUrl
          </stentry>
        </strow>
        <strow>
          <stentry>
            parameters.cloudManagerTenantId
          </stentry>
          <stentry>
            deployment.project.id
          </stentry>
        </strow>
        <strow>
          <stentry>
            parameters.cloudManagerTenantName
          </stentry>
          <stentry>
            deployment.project.name
          </stentry>
        </strow>
        <strow>
          <stentry>
            parameters.cloudManagerUserName
          </stentry>
          <stentry>
            deployment.project.username
          </stentry>
        </strow>
        <strow>
          <stentry>
            parameters.cloudManagerUserPassword
          </stentry>
          <stentry>
            deployment.project.password
          </stentry>
        </strow>
        <strow>
          <stentry>
            parameters.enm_internal_network_name
          </stentry>
          <stentry>
            'enm_internal_network_' + deployment.project.name
          </stentry>
        </strow>
        <strow>
          <stentry>
            parameters.enm_external_security_group_name
          </stentry>
          <stentry>
            'enm_external_security_group_' + deployment.project.name
          </stentry>
        </strow>
        <strow>
          <stentry>
            parameters.enm_internal_security_group_name
          </stentry>
          <stentry>
            'enm_internal_security_group_' + deployment.project.name
          </stentry>
        </strow>
        <strow>
          <stentry>
            parameters.enm_laf_security_group_nam
          </stentry>
          <stentry>
            'enm_laf_security_group_' + deployment.project.name
          </stentry>
        </strow>
        <strow>
          <stentry>
            parameters.enm_external_network_name
          </stentry>
          <stentry>
            podNetwork.name
          </stentry>
        </strow>
        <strow>
          <stentry>
            parameters.external_subnet
          </stentry>
          <stentry>
            podNetwork.ipv4_subnet.cidr
          </stentry>
        </strow>
        <strow>
          <stentry>
            parameters.external_gateway
          </stentry>
          <stentry>
            podNetwork.ipv4_subnet.gateway_ip
          </stentry>
        </strow>
        <strow>
          <stentry>
            parameters.external_netmask
          </stentry>
          <stentry>
            Calculated from value of podNetwork.ipv4_subnet.cidr
          </stentry>
        </strow>
        <strow>
          <stentry>
            parameters.external_subnet_ipv6
          </stentry>
          <stentry>
            podNetwork.ipv6_subnet.cidr
          </stentry>
        </strow>
        <strow>
          <stentry>
            parameters.external_gateway_ipv6
          </stentry>
          <stentry>
            podNetwork.ipv6_subnet.gateway_ip
          </stentry>
        </strow>
        <strow>
          <stentry>
            parameters.svc_CM_vip_to_fip
          </stentry>
          <stentry>
            parameters.svc_CM_vip_external_ip_address
          </stentry>
        </strow>
        <strow>
          <stentry>
            parameters.svc_FM_vip_to_fip
          </stentry>
          <stentry>
            parameters.svc_FM_vip_external_ip_address
          </stentry>
        </strow>
        <strow>
          <stentry>
            parameters.svc_PM_vip_to_fip
          </stentry>
          <stentry>
            parameters.svc_PM_vip_external_ip_address
          </stentry>
        </strow>
        <strow>
          <stentry>
            parameters.laf_url
          </stentry>
          <stentry>
            'http://' + parameters.enm_laf_1_ip_external
          </stentry>
        </strow>
        <strow>
          <stentry>
            parameters.httpd_fqdn
          </stentry>
          <stentry>
            DNS query based off first IP from parameters.haproxy_external_ip_list or temporary if haproxy_instances is set to 0
          </stentry>
        </strow>
        <strow>
          <stentry>
            parameters.SSO_COOKIE_DOMAIN
          </stentry>
          <stentry>
            parameters.httpd_fqdn
          </stentry>
        </strow>
        <strow>
          <stentry>
            parameters.esmon_hostname
          </stentry>
          <stentry>
            DNS query based off first IP from parameters.esmon_external_ip_list
          </stentry>
        </strow>
        <strow>
          <stentry>
            parameters.COM_INF_LDAP_ROOT_SUFFIX
          </stentry>
          <stentry>
            dc=&lt;First part of parameters.httpd_fqdn&gt;,dc=com
          </stentry>
        </strow>
        <strow>
          <stentry>
            parameters.key_name
          </stentry>
          <stentry>
            'key_pair_' + deployment.project.name
          </stentry>
        </strow>
      </simpletable>
    </section>

    <section>
      <title id="externalIP">External IP Population</title>
      <lines>
        DIT also supports auto population of external ip address fields. These are fields that reference the following schema definitions.
        <b>Warning:</b> If these definitions are removed or renamed in the enm sed schema, auto population of these keys will break down and DIT may need to be updated.
        Whether installing or upgrading DIT, the procedure is the same.
      </lines>
      <simpletable>
        <sthead>
          <stentry>
            Schema Definition Name
          </stentry>
        </sthead>
        <strow>
          <stentry>
            /definitions/ipv4_external
          </stentry>
        </strow>
        <strow>
          <stentry>
            /definitions/ipv4_external_list
          </stentry>
        </strow>
        <strow>
          <stentry>
            /definitions/ipv6_external
          </stentry>
        </strow>
        <strow>
          <stentry>
            /definitions/ipv6_external_list
          </stentry>
        </strow>
      </simpletable>
      <lines>
        Any keys found in the schema that match these definitions, will have their addresses taken from the ranges found in the project.
        <b>Warning:</b> If the pod and project network details have not been added for your deployment, they must be added before enabling auto population. Otherwise the calculation of valid ips to use for these keys cannot take place.
        Please note that during auto population of these ips, any fields that already have valid values within the ranges, will not be changed. Only ips found that are duplicates, invalid, or not within the ip ranges will be removed and recalculated from those ips found to be not in use.
        The number of ips given to the list keys, will match the instance count set for that particular service.
        <ul>
        <li>If no instance count is found in the sed, it is assumed to be 1.</li>
        <li> If the instance count is set to 0, a dummy ip address value eg '1.1.1.1' will be given to that key to ensure it can still be saved.</li>
      </ul>
      </lines>
    </section>

    <section>
      <title id="internalIP">Internal IP Population</title>
      <lines>
        DIT also supports auto population of internal ip address fields. These are fields that reference the following schema definitions.
        <b>Warning:</b> If these definitions are removed or renamed in the enm sed schema, auto population of these keys will break down and DIT may need to be updated.
      </lines>
      <simpletable>
        <sthead>
          <stentry>
            Schema Definition Name
          </stentry>
        </sthead>
        <strow>
          <stentry>
            /definitions/ipv4_internal
          </stentry>
        </strow>
        <strow>
          <stentry>
            /definitions/ipv4_internal_list
          </stentry>
        </strow>
        <strow>
          <stentry>
            /definitions/ipv6_internal
          </stentry>
        </strow>
        <strow>
          <stentry>
            /definitions/ipv6_internal_list
          </stentry>
        </strow>
      </simpletable>
      <lines>
        For internal IPs, the ip address range that is used starts where the existing 'dynamic_ip_range_end' and 'dynamic_ipv6_range_end' keys finish. The auto populate range is from the next ip, up until the end of the available IPs in the internal subnet
        Special handling is added for the neo4j keys. The neo4j keys are duplicated in the sed currently. They exist as a list and also as three individual internal keys. The list keys are auto populated first, and then the individual keys get a copy of the IPs given in the list.
      </lines>
    </section>

    <section>
      <title id="vrrpIDs">Virtual Router Identifier Population</title>
      <lines>
        DIT also supports auto population of virtual router identifier fields. These IDs must be unique per pod network and can range from 1 - 255. A subset of this range can be used by filling in the range start and end when creating/editing your pod within DIT.
        These are fields that reference the following schema definition.
        <b>Warning:</b> If these definitions are removed or renamed in the enm sed schema, auto population of these keys will break down and DIT may need to be updated.
      </lines>
      <simpletable>
        <sthead>
          <stentry>
            Schema Definition Name
          </stentry>
        </sthead>
        <strow>
          <stentry>
            /definitions/virtual_router_identifier
          </stentry>
        </strow>
      </simpletable>
    </section>

    <section>
      <title id="running">When It Runs</title>
      <lines>
        Auto population runs every time the document is saved.
        This includes when the auto deployer scripts are upgrading a sed from one schema version to another.
        This means that any new keys introduced in that new schema version, will be auto populated if they are a supported key.
        When a change is made to a Deployment, Project or Pod in DIT, the UI will also trigger a resave of any related documents.
        For this reason changing for example a project range that may mean theres not enough IPs, will allow the project details itself to be saved but the resave of the document will throw an error. At this point you can fix any details about the range in the project and resave that project, which will again in turn resave the related documents.
      </lines>
    </section>

  </conbody>
</concept>
